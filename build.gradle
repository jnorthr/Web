/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jim' at '8/5/16 11:18 PM' with Gradle 2.14
 *
 * This generated file contains a commented-out sample project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Groovy
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'war'
apply plugin: "de.qaware.seu.as.code.git"

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.de.qaware.seu.as.code:seuac-git-plugin:2.3.0.RC2"
    classpath "org.slf4j:slf4j-log4j12:1.7.21"
  }
}

/*
plugins {
  id "de.qaware.seu.as.code.git" version "2.3.0.RC2"
}
*/

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile group: 'log4j', name:'log4j', version: '1.2.17'
	// better put log4j.properties in the src/main/resources folders 

    compile "org.codehaus.groovy:groovy-all:2.4.7"
    runtime "org.codehaus.groovy:groovy-all:2.4.7"
    runtime   "org.slf4j:slf4j-log4j12:1.7.21"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    // Spock Framework basic dependencies:
    testCompile "org.codehaus.groovy:groovy-all:2.4.7"
    // The version have to be compatible with Groovy:
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
 
    // Optional dependencies Spock
    // To use Hamcrest matchers:
    testCompile "org.hamcrest:hamcrest-core:1.3"
 
    // To mock classes:
    testRuntime "cglib:cglib-nodep:3.1"
    // Use with cglib to mock classes without default constructor:
    testRuntime "org.objenesis:objenesis:2.1"
}

mainClassName = "org.jnorthr.wow.WOW"
webAppDirName = file('war')
war.duplicatesStrategy = "EXCLUDE"
task say << {
	println "$projectDir=["+projectDir+"]"
}

// runs the Chooser main() method; args are ignored but maybe later ?
task(runChooser, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.wow.Chooser'
	classpath = sourceSets.main.runtimeClasspath
	args 'jimbo', 'hi kids'
	systemProperty 'simple.message', 'Hi kids '
}

// runs the Picker main() method; args are ignored but maybe later ?
task(runPicker, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.wow.Picker'
	classpath = sourceSets.main.runtimeClasspath
	args 'jimbo', 'hi kids'
	systemProperty 'simple.message', 'Hi kids '
}

// runs the Saverer main() method; args are ignored but maybe later ?
task(runSaver, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.wow.Saver'
	classpath = sourceSets.main.runtimeClasspath
	args 'jimbo', 'hi kids'
	systemProperty 'simple.message', 'Hi kids '
}

// runs the main() method; args are ignored but maybe later ?
task(runResponse, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.wow.Response'
	classpath = sourceSets.main.runtimeClasspath
	args 'jimbo', 'hi kids'
	systemProperty 'simple.message', 'Hi kids '
}

git {
    WOW {
    	url 'https://github.com/jnorthr/WOW.git'
        directory file("$projectDir")
        branch 'HEAD'
        //username gitUsername
        //password gitPassword

        options {
            clone {
                singleBranch = false
                cloneSubmodules = true
                noCheckout = false
                timeout = 300
            }
            pull {
                rebase = true
                timeout = 600
            }
            push {
                dryRun = true
                pushAll = true
                pushTags = true
                timeout = 200
                force = true
            }
        }
    }
}
task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}